#+STARTUP: showeverything
#+AUTHOR:    Donghee Park
# Creative Commons, Share-Alike (cc)
#+EMAIL:     dongheepark@gmail.com
#+TITLE: PX4 and ROS Programming Day 3
#+HTML_HEAD_EXTRA: <style type="text/css">img {  width: auto ;  max-width: 100% ;  height: auto ;} </style>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>

* 수업
 - 목표: 컴퓨터 비전을 시뮬레이터에서 테스트할 수 있는 환경을 만들 수 있다.
 - 교재: https://learn.dronemap.io/
 - 코치: 박동희 dongheepark@gmail.com

* 수업 진행
 - Gazebo에 카메라 추가
 
* 수업 자료

** Gazebo에 카메라 추가

[[https://i.imgur.com/NlL3bhA.png]]

Gazebo 에서 드론에 부착된 카메라를 이용한 컴퓨터 비전을 시뮬레이션 하기 위해서는 기체에 카메라를 부착해야 한다.

~px4_sitl~ px4 sitl 개발시 사용되는 기체(iris)에 카메라를 부착해보자. 

1. 카메라 부착된 기체 모델 생성.

px4에서 사용하는 iris 모델을 수정하여 카메라를 부착하여 보자.

#+BEGIN_SRC
cd ~/Firmware/Tools/sitl_gazebo/models/rotors_description/urdf
#+END_SRC

2. 카메라 추가

~iris_base.xacro~ 파일에서 다음 내용을 '<!-- Mount an ADIS16448 IMU -->' 전에 추가

#+BEGIN_SRC

<!-- Mount a camera -->
<xacro:camera_macro
namespace="${namespace}"
parent_link="base_link"
camera_suffix="red_iris"
frame_rate="30.0"
horizontal_fov="1.3962634"
image_width="800"
image_height="800"
image_format="R8G8B8"
min_distance="0.02"
max_distance="300"
noise_mean="0.0"
noise_stddev="0.007"
enable_visual="1"
>
<box size="0.05 0.05 0.05" />
<origin xyz="0 0 -0.05" rpy="0 1.57079 0"/>
</xacro:camera_macro>

#+END_SRC

** Gazebo 실행

모델 확인
#+BEGIN_SRC
cd ~/Firmware
make clean 
DONT_RUN=1 make px4_sitl gazebo
make px4_sitl gazebo
#+END_SRC

카메라를 ROS 토픽으로 연결 하여 gazebo 실행
#+BEGIN_SRC
source ~/catkin_ws/devel/setup.bash
source Tools/setup_gazebo.bash $(pwd) $(pwd)/build/px4_sitl_default
export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$(pwd)
export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$(pwd)/Tools/sitl_gazebo
roslaunch px4 posix_sitl.launch
# roslaunch px4 mavros_posix_sitl.launch
#+END_SRC

Error

#+BEGIN_SRC
[Err] [Plugin.hh:178] Failed to load plugin libgazebo_ros_camera.so: libCameraPlugin.so: cannot open shared object file: No such file or directory
source /usr/share/gazebo-9/setup.sh

# SITL: Preflight Fail : Compass #0 uncalibrated
rm ~/.ros/eeprom/parameters
#+END_SRC


** Gazebo의 카메라 영상을 ROS image_raw 토픽으로 보기

[[https://i.imgur.com/PSvUDWs.png]]

~image_raw~ 토픽 확인
#+BEGIN_SRC
rostopic list | grep camera

rostopic echo /iris/camera_red_iris/image_raw

rosrun image_view image_view image:=/iris/camera_red_iris/image_raw
#+END_SRC

** aruco 월드 구성
https://github.com/antonikaras/uav_mavros_simulation/blob/8bfe27ca9938d05974451b4dce807ad69dd3f4b7/worlds/aruco.world

** Precision landing
 - https://github.com/tizianofiorenzani/how_do_drones_work/blob/master/scripts/06_precise_landing.py
 - https://gist.github.com/donghee/fc6c1c7082e3223f512391eed2cbfa16
 - https://github.com/antonikaras/uav_mavros_simulation

#+BEGIN_SRC
#! /usr/bin/env python2

import rospy
import mavros
import cv2 as cv
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from nav_msgs.msg import Odometry
from mavros_msgs.msg import PositionTarget as PT
from geometry_msgs.msg import Vector3, TwistStamped
from uav_mavros_simulation.srv import goto_aruco, goto_arucoResponse, land_aruco, land_arucoResponse
from std_msgs.msg import Float32
from tf import transformations as tr
import mavros_msgs.msg
import mavros.command
from mavros import setpoint as SP
from simple_pid import PID

class ArucoNavigationController():

    def __init__(self):
        ''' Class that acts as a server for the goto_aruco service and the land_aruco service '''

        # init node
        rospy.init_node('aruco_navigation')
        mavros.set_namespace('mavros')

        # Setup Subscribers
        ## Marker pos
        aruco_pos = rospy.Subscriber('/aruco_marker_pos', PT, self._arucoCallback)
        ## mavros state
        state_sub = rospy.Subscriber(mavros.get_topic('state'),
                                 mavros_msgs.msg.State, self._state_callback)

         # Setup publishers
        # /mavros/setpoint_velocity/cmd_vel
        self.cmd_vel_pub = rospy.Publisher("mavros/setpoint_velocity/cmd_vel", TwistStamped, queue_size=10)

        # setup services
        # /mavros/cmd/arming
        self.set_arming = rospy.ServiceProxy('/mavros/cmd/arming', mavros_msgs.srv.CommandBool)
        # /mavros/set_mode
        self.set_mode = rospy.ServiceProxy('/mavros/set_mode', mavros_msgs.srv.SetMode)

        # Initialize the service servers
        goto_aruco_serv = rospy.Service('goto_aruco', goto_aruco, self.GotoAruco)
        land_aruco_serv = rospy.Service('land_aruco', land_aruco, self.LandAruco)

        # Initialize variables
        self.pos = [0.0] * 4
        self.markerPos = [0.0] * 4
        self.UAV_state = mavros_msgs.msg.State()
        self.markerHeight = 20.0 # Height above the marker

        # Setup rate
        self.rate = rospy.Rate(30)
        rospy.sleep(1)
        rospy.spin()

    def _arucoCallback(self, msg):
        ''' Callback for the aruco marker POS '''
        self.markerPos[0] = msg.position.x
        self.markerPos[1] = msg.position.y
        self.markerPos[2] = msg.position.z
        self.markerPos[3] = msg.yaw

        self.markerPos = np.array(self.markerPos)

    def _state_callback(self, topic):
        self.UAV_state.armed = topic.armed
        self.UAV_state.connected = topic.connected
        self.UAV_state.mode = topic.mode
        self.UAV_state.guided = topic.guided

    def GotoAruco(self, req):
        ''' Goto the aruco marker '''
        rospy.loginfo('Going to aruco marker')
        timeOut = req.timeOut

        new_sp = TwistStamped()
        while self.UAV_state.mode != "OFFBOARD" :
            rospy.sleep(0.1)
            self.set_mode(0, 'OFFBOARD')
            # Publish something to activate the offboard mode
            self.cmd_vel_pub.publish(new_sp)

        if not mavros.command.arming(True) :
            mavros.command.arming(True)

        ts = rospy.Time.now()

        xPID = PID(.25, 0.05, 0.01, output_limits=(-.5, 0.5), setpoint=0.0)
        yPID = PID(.25, 0.05, 0.01, output_limits=(-.5, 0.5), setpoint=0.0)
        zPID = PID(.2, 0.0, 0.05, output_limits=(-0.5, 0.5), setpoint=self.markerHeight)
        yawPID = PID(.2, 0.0, 0.0, output_limits=(-1.0, 1.0), setpoint=0.0)

        while np.linalg.norm(self.markerPos[0:3] - np.array([0.0, 0.0, -self.markerHeight])) > 1.0 and \
                (rospy.Time.now() - ts < rospy.Duration(timeOut)):

            new_sp = TwistStamped()
            new_sp.twist.linear.x = xPID(-self.markerPos[0])
            new_sp.twist.linear.y = yPID(-self.markerPos[1])
            new_sp.twist.linear.z = zPID(-self.markerPos[2])
            new_sp.twist.angular.z = yawPID(self.markerPos[3])

            #print(np.linalg.norm(self.markerPos[0:3] - np.array([0.0, 0.0, -self.markerHeight])))

            self.cmd_vel_pub.publish(new_sp)

        return goto_arucoResponse(np.linalg.norm(self.markerPos[0:3] - np.array([0.0, 0.0, -self.markerHeight])))

    def LandAruco(self, req):
        ''' Land on the aruco marker '''

        rospy.loginfo('Landing on the aruco marker')
        timeOut = req.timeOut

        new_sp = TwistStamped()
        while self.UAV_state.mode != "OFFBOARD" :
            rospy.sleep(0.1)
            self.set_mode(0, 'OFFBOARD')
            # Publish something to activate the offboard mode
            self.cmd_vel_pub.publish(new_sp)

        if not mavros.command.arming(True) :
            mavros.command.arming(True)

        ts = rospy.Time.now()

        xPID = PID(.4, 0.075, 0.02, output_limits=(-.5, 0.5), setpoint=0.0)
        yPID = PID(.4, 0.075, 0.02, output_limits=(-.5, 0.5), setpoint=0.0)
        zPID = PID(.5, 0.0, 0.05, output_limits=(-0.75, 0.75), setpoint=0.0)
        yawPID = PID(.2, 0.0, 0.0, output_limits=(-1.0, 1.0), setpoint=0.0)

        prev_height = self.markerPos[2]
        ts2 = rospy.Time.now()

        while (rospy.Time.now() - ts < rospy.Duration(timeOut)):

            new_sp = TwistStamped()
            new_sp.twist.linear.x = xPID(-self.markerPos[0])
            new_sp.twist.linear.y = yPID(-self.markerPos[1])
            new_sp.twist.linear.z = zPID(-self.markerPos[2])
            new_sp.twist.angular.z = yawPID(self.markerPos[3])

            if self.markerPos[2] != prev_height:
                ts2 = rospy.Time.now()
                prev_height = self.markerPos[2]

            if rospy.Time.now() - ts2 > rospy.Duration(1.0):
                break
            #print(np.linalg.norm(self.markerPos[0:3] - np.array([0.0, 0.0, -self.markerHeight])))

            self.cmd_vel_pub.publish(new_sp)
        return land_arucoResponse(np.linalg.norm(self.markerPos[0:3] - np.array([0.0, 0.0, 0.0])))

###################################################################################################
if __name__ == "__main__":
    ANC = ArucoNavigationController()
#+END_SRC

python simple off board
https://github.com/OBSchofieldUK/RM-ICS20/blob/master/sample_offboard/src/main.py
https://github.com/OBSchofieldUK/RM-ICS20/blob/master/droneFramework/secondaryPilots/loiter/scripts/loiterPilot.py

* 참고
 - https://github.com/spmallick/learnopencv
 - http://gazebosim.org/tutorials?tut=add_laser  Gazebo에 카메라 추가하기
 - https://blog.naver.com/PostView.nhn?blogId=dnddnjs11&logNo=220852140714&parentCategoryNo=&categoryNo=17&viewDate=&isShowPopularPosts=false&from=postView
 - http://ros-developer.com/2017/04/23/aruco-ros/ 6dof ros 
 - https://docs.google.com/document/d/1QU9KoBtjSM2kF6ITOjQ76xqL7H0TEtXriJX5kwi9Kgc/edit
 - https://www.youtube.com/watch?v=U0ul4WIQFUM
 - https://github.com/pineland/px4/wiki/01.3.1-%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EB%85%B8%ED%95%98%EC%9A%B0 modudculab_ros 에러 해결
 - Accurate Landing of Unmanned Aerial Vehicles Using Ground Pattern Recognition Jamie
  - https://res.mdpi.com/d_attachment/electronics/electronics-08-01532/article_deploy/electronics-08-01532.pdf
  - https://github.com/dewub/vision_drone
 - https://www.youtube.com/watch?v=snLynAu2lO8 precision landing
 - https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6874798/#!po=4.31034
 - https://pub.tik.ee.ethz.ch/students/2018-FS/SA-2018-21.pdf drone precision landing using vision
 - https://github.com/antonikaras/uav_mavros_simulation
 - https://github.com/antonikaras/drone_cable_detection/blob/master/src/swarm_commander.py 두대의 uav로 전선 탐섹
 - https://github.com/tizianofiorenzani/how_do_drones_work/blob/master/scripts/06_precise_landing.py
 - https://gist.github.com/donghee/fc6c1c7082e3223f512391eed2cbfa16

 - https://github.com/mwryu88/ARUCO Aruco model for gazebo 
 - https://github.com/AerialRobotics-IITK/aruco_detection_gazebo/blob/master/tf-library/offboard/src/offb_node.cpp
 - gazebo에서 ctrl+t 누르면 가제보 토픽 메세지
 - https://github.com/AbdulrahmanGoian/victim_localization/blob/8be58d929a1c68232e2beef964b4026cb92c5c68/urdf/iris/iris_with_sensors.xacro

https://pdfs.semanticscholar.org/b562/b5a97fc85c574d6baaa803122e35686e047e.pdf?_ga=2.88187419.1227225162.1596473043-1633752812.1596473043
